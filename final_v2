import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

//Employee class
class Employee {
	private String name, surname;
    	private double maxMonthlyTotal;

    	public Employee(String n, String s, double maxMonthlyTotal) {
		this.name = n;
		this.surname = s;
		this.maxMonthlyTotal = maxMonthlyTotal;
    	}//do we need "this."?

    	public double getMaxMonthlyTotal() {
		return this.maxMonthlyTotal;
    	}

    	public String toString() {
		return name + " " + surname;
    	}
}

//ExpenseType class
abstract class ExpenseType {
	private int ID;
    	private String desc;
    	private double maxMonthlyExpense;

	public ExpenseType (int ID, String desc, double maxMonthlyExpense) {
		this.ID = ID;
        	this.desc = desc;
        	this.maxMonthlyExpense = maxMonthlyExpense;
	}

	public String getDescription () {
		return this.desc;
	}

	public double getMaxMonthlyExpense () {
		return this.maxMonthlyExpense;
	}

	public String toString () {
		return this.ID + " " + this.desc + " " + this.maxMonthlyExpense;
	}
}

//ExpenseType1 class
class ExpenseType1 extends ExpenseType {
	private double price, unitNo;
	public ExpenseType1(int ID, String desc, double maxMonthlyExpense, double p, double unit) {
		super(ID, desc, maxMonthlyExpense);
		this.price = p;
		this.unitNo = unit;
	}

	public double getPrice () {
		return this.price;
	}

	public double getUnitNo () {
		return this.unitNo;
	}

	public double calcValue (double quantity) {
		return  quantity * this.price;
	}

	@Override
	public String toString() {
		return "Price per unit: " + this.price + " Number of units: " + this.unitNo;
	}
}

//ExpenseType2 class
class ExpenseType2 extends ExpenseType {
	private double rate;
	public ExpenseType2(int ID, String desc, double maxMonthlyExpense, double rate) {
		super(ID, desc, maxMonthlyExpense);
		this.rate = rate;
	}

	public double getRate() {
		return this.rate;
	}

	public double calcValue (double n) {
		return (n * this.rate) / 100;
	}

	@Override
	public String toString() {
		return "Rate in percentage: " + this.rate + "%";
	}
}

//Expense class
class Expense {
    	private Employee employee;
    	private ExpenseType expenseType;
    	private double amount;
	private String reason;

	public Expense (Employee emp, ExpenseType type, double amount, String reason) {
		this.employee = emp;
		this.expenseType = type;
		this.amount = amount;
		this.reason = reason;
	}

    	public Employee getEmployee() {
		return employee;
    	}

	public ExpenseType getExpenseType () {
		return this.expenseType; 
	}

    	public String toString() {
		return employee + " spent " + amount + " for " + expenseType + " , the reason being: " + reason;
    	}

abstract class Transaction {
	private Employee employee;
	private double value;

	public Trans(Employee employee, double value) {
		this.employee = employee;
		this.value = value;
	}

	public Emp getEmployee() {
		return this.employee;
	}

	public double getValue() {
		return this.value;
	}
}

class Downpayment extends Transaction {
	public Downpayment(Employee employee, double value) {
		super(employee, value);
	}
}

class Difference extends Transaction {
	public Difference(Employee employee, double value) {
		super(employee, value);
	}
}

class Compensation extends Transaction {
	public Downpayment(Employee employee, double value, ExpenseType type) {
		super(employee, value);
		this.type = type;
	}
}

class Finalised extends Transaction {
	public Finalised(Employee employee, double value) {
		super(employee, value);
	}
}

public class MainApp {
    Scanner input;
    ArrayList<Employee> employees;
    ArrayList<Expense> expenses;
    ArrayList<Transaction> transactions;

    void loadData() {
		Employee petros = new Employee("peter", "fraggatzis", 1000);
		employees.add(petros);
		Employee theodore = new Employee("theo", "dore", 100);
		employees.add(theodore);
		Employee filimon = new Employee("filimon", "fraggatzis", 500);
		employees.add(filimon);
		Employee lilia = new Employee("lilia", "mavros", 500000);
		employees.add(lilia);
    }

    public MainApp() {
        input = new Scanner(System.in);
        employees = new ArrayList<Employee>();
		expenses = new ArrayList<Expense>();
		loadData();
    }

    void newEmployee() {
        System.out.print("Enter employee's last name: ");
        String a = input.nextLine();
        System.out.print("Enter employee's first name: ");
        String b = input.nextLine();
        System.out.print("Enter employee's max monthly compensation: ");
        double c = input.nextDouble();
		input.nextLine(); // clear newline
        employees.add(new Employee(a, b, c));
    }

    public void mainMenu() {
        int menu;
	
		do {
			System.out.println("Main Menu"
			       +"\n1: Add new expense type"
			       +"\n2: Add new employee"
			       +"\n3: Add new employee expense"
			       +"\n4: Add new downpayment transaction"
			       +"\n5: Print employees' expenses"
			       +"\n6: Clear employee's expenses"
			       +"\n7: Print employees' transactions"
			       +"\n8: Clear all company's employees' expenses"
			       +"\n9: Print final monthly sum of all employees"
			       +"\n0: exit");
			System.out.print("Enter selection to continue [0-9]: ");
			menu = input.nextInt();
			input.nextLine(); // skip newline
			switch (menu) {
				case 1:
					newExpenseType();
					break;
				case 2: 
					newEmployee();
					break;
				case 3:
					newExmployeeExp();
					break;
				case 4:
					newDownpayment();
					break;
				case 5: 
					printExpenses();
					break;
				case 6: 
					clearExpenses();
					break;
				case 7: 
					printTransactions();
					break;
				case 8:
					clearAll();
					break;
				case 9:
					printAll();
					break;
				case 0:
					break;
				default:
					System.out.println("Invalid number!");
			}
		} while (menu != 0);
	}

	// XXX just random testing. erase later.
	for (Employee employee: employees) {
	    System.out.println(employee);
	}
    
    List<Expense> getExpensesForEmployee(Employee employee) {
		List<Expense> employeeExpenses = new ArrayList<Expense>();
		for (Expense expense: expenses) {
			if (expense.getEmployee() == employee) {
			employeeExpenses.add(expense);
			}
		}
        return employeeExpenses;
    }

    void printExpenses(Employee employee) {
	List<Expense> employeeExpenses = getExpensesForEmployee(employee);
	for (Expense expense: employeeExpenses) {
	System.out.println(expense);
	}
    }

    public static void main(String[] args) {
        System.out.println("Welcome to mainApp!");
	MainApp myapp = new MainApp();
        myapp.mainMenu();
    }
}
