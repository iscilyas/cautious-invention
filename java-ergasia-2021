//Expense class
public static class Exp {

    private Emp emp;
    private ExpType type;
    public double quant;
    private String reason;

    public Exp (Emp emp, ExpType type, double quant, String reason) {

        this.emp = emp;
        this.type = type;
        this.quant = quant;
        this.reason = reason;

    }

}

//ExpenseType class and subclasses
public abstract class ExpType {

    private int ID;
    private String desc;
    private double maxExp;

    public ExpType (int ID, String desc, double maxExp) {
        this.ID = ID;
        this.desc = desc;
        this.maxExp = maxExp;
    }
        
}
      
public class ExpType1 extends ExpType {

    public ExpType1(int ID, String desc, double maxExp) {

        super(ID, desc, maxExp);

    }

    public double price;
    public int unitsNo;

}
      
public class ExpType2 extends Exptype {


    private double rate;   
}

//Emploee class     
public class Emp {

    private String name, surname;
    private double maxTotal;

    public Emp (String n, String s, double max) {

        name = n;
        surname = s;
        maxTotal = max;

    }

}

class Trans {
  private String emp;
  private double value;
}

abstract class DownPay extends Trans {
   
}

abstract class Dif extends Trans {
   
}

class Comp extends Trans {
  public operation() {
    
  }
}

class Clear extends Trans {
  private String type;
}

import java.util.Scanner;

public static void main (String[] args) {
  Scanner myObj = new Scanner(System.in);
  System.out.println("Welcome to mainApp!");
  mainMenu();
}

public static void mainMenu()
	int menu;
	System.out.println("Enter number to continue"
			   +"\n1: Insert new expense type"
			   +"\n2: Insert new employee"
			   +"\n3: Insert new employee expense"
			   +"\n4: Insert new downpayment transaction"
			   +"\n5: Print employees' expenses"
			   +"\n6: Clear employee's expenses"
			   +"\n7: Print employees' transactions"
			   +"\n8: Clear all company's employees' expenses"
			   +"\n9: Print final monthly sum of all employees");
	}
	int menu = myObj.nextInt();
	switch (menu) {
		 case 1:
			newExpenseType();
			break;
		 case 2: 
			newEmployee();
			break;
		 case 3:
			newExmployeeExp();
			break;
		 case 4:
			newDownpayment();
			break;
		 case 5: 
			printExpenses();
			break;
		 case 6: 
			clearExpenses();
			break;
		 case 7: 
			printTransactions();
			break;
		 case 8:
			clearAll();
			break;
		 case 9:
		  printAll();
			break;
		 default:
			System.out.println("Invalid number!");
			mainMenu();
 }
 
 public static void newDownpayment{
	System.out.println("Select Employee. Enter 0 to return to main menu.")
	boolean flag=true
	for (int i=0; i < EmpName.length) {
		System.out.println(i+1+". "+EmpName[i]+" "+EmpSurname[i]);
	}
	do{	
		int menu = myObj.nextInt();
		if (menu-1>EmpName.length}||menu-1<-1 ) {
			System.out.println("Invalid number!");
			flag=false
		}
		else if menu-1 = -1
			mainMenu();
	}
	while flag;
	System.out.println("Enter amount:");
	int amount = myObj.nextInt();
	Downpayment d = new Downpayment(amount, EmpSurame[menu-1],)
}
